// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using fbcmanager_api.Database;

#nullable disable

namespace fbcmanager_api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<string>("EventsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ParticipantsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("EventsId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("EventUser");
                });

            modelBuilder.Entity("fbcmanager_api.Database.Models.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("BookedFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("BookedTo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FieldId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TeamId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("TeamId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("fbcmanager_api.Database.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<TimeOnly>("From")
                        .HasColumnType("time(6)");

                    b.Property<string>("Header")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<TimeOnly>("To")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("fbcmanager_api.Database.Models.Field", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BookedById")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("BookedFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("BookedTo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FieldName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BookedById");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("fbcmanager_api.Database.Models.Practise", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("From")
                        .HasColumnType("time(6)");

                    b.Property<string>("LocationId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TeamId")
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly>("To")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("Practises");
                });

            modelBuilder.Entity("fbcmanager_api.Database.Models.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TeamName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("fbcmanager_api.Database.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.Property<string>("TeamId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Zip")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "-1",
                            Birthdate = new DateOnly(1, 1, 1),
                            City = "ADMIN",
                            ConcurrencyStamp = "71d04902-b790-4361-9bce-989e1650aca0",
                            Email = "ADMIN",
                            Firstname = "ADMIN",
                            Lastname = "ADMIN",
                            NormalizedEmail = "ADMIN",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDtOB5I6akZLSnLv0VBjejEEBKY+b74Z+iNIsLvgRS0lnAJDA0LF2AtTPfLHv3cwyA==",
                            PhoneNumber = "ADMIN",
                            SecurityStamp = "5f788fa7-3059-4ddc-8cb5-125fece85693",
                            Street = "ADMIN",
                            UserName = "admin",
                            Zip = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "-2",
                            ConcurrencyStamp = "c3829907-ff6b-4534-8dd3-015a3bccc574",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "-1",
                            ConcurrencyStamp = "f0526591-df13-4ce3-b04d-8cef5f057881",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "-1",
                            RoleId = "-1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PractiseUser", b =>
                {
                    b.Property<string>("ParticipantsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PractisesId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ParticipantsId", "PractisesId");

                    b.HasIndex("PractisesId");

                    b.ToTable("PractiseUser");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("fbcmanager_api.Database.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fbcmanager_api.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fbcmanager_api.Database.Models.Booking", b =>
                {
                    b.HasOne("fbcmanager_api.Database.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId");

                    b.HasOne("fbcmanager_api.Database.Models.Team", "Team")
                        .WithMany("Bookings")
                        .HasForeignKey("TeamId");

                    b.Navigation("Field");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("fbcmanager_api.Database.Models.Field", b =>
                {
                    b.HasOne("fbcmanager_api.Database.Models.Team", "BookedBy")
                        .WithMany()
                        .HasForeignKey("BookedById");

                    b.Navigation("BookedBy");
                });

            modelBuilder.Entity("fbcmanager_api.Database.Models.Practise", b =>
                {
                    b.HasOne("fbcmanager_api.Database.Models.Field", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("fbcmanager_api.Database.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("fbcmanager_api.Database.Models.User", b =>
                {
                    b.HasOne("fbcmanager_api.Database.Models.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("fbcmanager_api.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("fbcmanager_api.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fbcmanager_api.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("fbcmanager_api.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PractiseUser", b =>
                {
                    b.HasOne("fbcmanager_api.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fbcmanager_api.Database.Models.Practise", null)
                        .WithMany()
                        .HasForeignKey("PractisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fbcmanager_api.Database.Models.Team", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
